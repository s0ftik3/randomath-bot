const mongo = require('mongodb');
const url = process.env.MONGO;
const Telegram = require('telegraf/telegram');
const telegram = new Telegram(process.env.TOKEN);

const messagesEn = [
    'üò¢ *Did you forgot about me? Keep studying and you will get the result!*',
    'üòí *I\'ve let you down, huh? You were supposed to fight for me, not join ignoramus club. Start training right now!*',
    'üòê *I have a soul too and I am too disappointed that you are not training anymore!*'
]

const messagesRu = [
    'üò¢ *–í—ã –∑–∞–±—ã–ª–∏ –æ–±–æ –º–Ω–µ? –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∑–∞–Ω–∏–º–∞—Ç—å—Å—è –∏ –≤—ã –¥–æ–±—å–µ—Ç–µ—Å—å —É—Å–ø–µ—Ö–æ–≤ –≤ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ!*',
    'üòí *–Ø –≤–∞—Å –ø–æ–¥–≤–µ–ª... –í—ã –¥–æ–ª–∂–Ω—ã –±—ã–ª–∏ —Å—Ä–∞–∂–∞—Ç—å—Å—è –∑–∞ –º–µ–Ω—è, –∞ –Ω–µ –ø—Ä–∏–º–∫–Ω—É—Ç—å –∫ –æ—Ç—Ä—è–¥—É –Ω–µ—É—á–µ–π. –ù–∞—á–Ω–∏—Ç–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!*',
    'üòê *–£ –º–µ–Ω—è —Ç–æ–∂–µ –µ—Å—Ç—å –¥—É—à–∞, –∏ —è –æ—á–µ–Ω—å –Ω–µ–¥–æ–≤–æ–ª–µ–Ω —Ç–µ–º, —á—Ç–æ –≤—ã –ø—Ä–µ–∫—Ä–∞—Ç–∏–ª–∏ –∑–∞–Ω—è—Ç–∏—è!*'
];

function remind() {
    mongo.connect(url, {
        useNewUrlParser: true,
        useUnifiedTopology: true
    }, (err, client) => {
        let db = client.db('randomath');
        db.collection('users').find().toArray((err, data) => {
            let today = new Date().getTime();
            let fiveDays = today - 432000000;
                
            for (let i = 0; i < data.length; i++) {
                let user = data[i];
                if (user.last_time_used <= fiveDays) {
                    mongo.connect(url, {
                        useNewUrlParser: true,
                        useUnifiedTopology: true
                    }, (err, client) => {
                        let db = client.db('randomath');
                        db.collection('users').find({ "id": user.id }).toArray((err, data) => {
                            let lang = user.lang;

                            mongo.connect(url, {
                                useNewUrlParser: true,
                                useUnifiedTopology: true
                            }, (err, client) => {
                                let db = client.db('randomath');
                                db.collection('users').find({ "id": user.id }).toArray((err, data) => {
                                    db.collection('users').updateOne({ "id": user.id }, { $set: { "last_time_used": new Date().getTime() } }, (err, result) => {
                                        if (err) return console.error(err);
                                    });
                                });
                            });

                            if (lang === 'EN') {
                                let i = Math.floor(Math.random() * messagesEn.length);
                                telegram.sendMessage(user.id, messagesEn[i], {
                                    reply_markup: {
                                        inline_keyboard: [
                                            [{ text: "ü§ò Start training!", callback_data: "train" }]
                                        ]
                                    }, parse_mode: "markdown"
                                })
                            } else if (lang === 'RU') {
                                let i = Math.floor(Math.random() * messagesRu.length);
                                telegram.sendMessage(user.id, messagesRu[i], {
                                    reply_markup: {
                                        inline_keyboard: [
                                            [{ text: "ü§ò –ù–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É!", callback_data: "train:ru" }]
                                        ]
                                    }, parse_mode: "markdown"
                                });
                            };
                        });
                    });
                };
            };
        });
    });
}

module.exports = remind;